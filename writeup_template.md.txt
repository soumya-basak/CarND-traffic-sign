# **Traffic Sign Recognition** 

## Writeup

**Build a Traffic Sign Recognition Project**

The goals / steps of this project are the following:
* Load the data set (see below for links to the project data set)
* Explore, summarize and visualize the data set
* Design, train and test a model architecture
* Use the model to make predictions on new images
* Analyze the softmax probabilities of the new images
* Summarize the results with a written report

** Jupyter Notebook **
Source Code: Traffic_Sign_Classifier.ipynb
** Basic summary of the data set **
* Download dataset: traffic-signs-data.zip
* The size of training set 34799.
* The size of validation set 4410.
* The size of test set 12630.
* The shape of a traffic sign image is (32,32,3).
* the number of unique classes/lebels in the data set 43.
** Exploratory visualization on the data set **
The bar chart shows the data distribution of the training data. Each bar represents one class (traffic sign) and how many samples are in the class. The mapping of traffic sign names to class id can be found here: signnames.csv
More traffic sign on training data set can be found on notebook.






[//]: # (Image 



































** Model Architecture **
 use a convolutional neuronal network to classify the traffic signs. The input of the network is an 32x32x1 image and the output is the probabilty of each of the 43 possible traffic signs.
My final model consisted of the following layers:

Layer
Description
Input
Output
Convolution 5x5
1x1 stride, valid padding, RELU activation
32x32x1
28x28x48
Max pooling
2x2 stride, 2x2 window
28x28x48
14x14x48
Convolution 5x5
1x1 stride, valid padding, RELU activation
14x14x48
10x10x96
Max pooling
2x2 stride, 2x2 window
10x10x96
5x5x96
Convolution 3x3
1x1 stride, valid padding, RELU activation
5x5x96
3x3x172
Max pooling
1x1 stride, 2x2 window
3x3x172
2x2x172
Flatten
3 dimensions -> 1 dimension
2x2x172
688
Fully Connected
connect every neuron from layer above
688
84
Fully Connected
output = number of traffic signs in data set
84
43


** Model Training **
I trained the model on AWS EC2 instances Nvidia GPU, 
* Here is my training parameters
Epoch : 35
Batch size = 128
My result after training the model
* Validation Accuracy = 0.960
* Test Accuracy = 0.951
** Test on new images **
I used google street view to get new images for my testing set. Here are 7 examples

The signs "speed limit 30", "yield, stop", "no entry" and "keep right" should be easy to detect, because they are clearly visible and there are lots of examples in the training set. The "priority road" sign should be a little bit tricky, because there are only parts of the sign visible.

** Softmax Probability **
 this model should be improved and trained with all traffic sign.









Resources: 
* Source code: Traffic_Sign_Classifier.ipynb




















